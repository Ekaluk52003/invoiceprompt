/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ItemInput: { // input type
    amount?: number | null; // Int
    name?: string | null; // String
    price?: number | null; // Int
    qty?: number | null; // Int
  }
  registerUserInput: { // input type
    email: string; // String!
    name: string; // String!
    password: string; // String!
    role: Array<NexusGenEnums['Roles'] | null> | null; // [Roles]
    username: string; // String!
  }
}

export interface NexusGenEnums {
  Roles: "ADMIN" | "USER"
  status: "BILLED" | "CANCEL" | "DRAFT" | "OVERDUE" | "PAID"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  JSON: any
}

export interface NexusGenObjects {
  CustomerType: { // root type
    contactInfo?: string | null; // String
    name?: string | null; // String
  }
  GetMeType: { // root type
    email?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
    username?: string | null; // String
  }
  InvoiceAmountType: { // root type
    amount?: number | null; // Int
    date?: string | null; // String
  }
  InvoiceHistoryType: { // root type
    createdAt?: string | null; // String
    description?: string | null; // String
    invoiceId?: number | null; // Int
    user?: string | null; // String
  }
  InvoiceType: { // root type
    TotalAmount?: number | null; // Int
    createdAt?: string | null; // String
    customer?: NexusGenRootTypes['CustomerType'] | null; // CustomerType
    date?: string | null; // String
    description?: string | null; // String
    dueDate?: string | null; // String
    id?: number | null; // Int
    items?: Array<NexusGenScalars['JSON'] | null> | null; // [JSON]
    name?: string | null; // String
    number?: number | null; // Int
    status?: NexusGenEnums['status'] | null; // status
    term?: number | null; // Int
    title?: string | null; // String
    user?: NexusGenRootTypes['UserType'] | null; // UserType
    userId?: number | null; // Int
    username?: string | null; // String
  }
  Mutation: {};
  Query: {};
  UserType: { // root type
    createdAt?: number | null; // Float
    email?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
    role?: Array<NexusGenEnums['Roles'] | null> | null; // [Roles]
    username?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  CustomerType: { // field return type
    contactInfo: string | null; // String
    name: string | null; // String
  }
  GetMeType: { // field return type
    email: string | null; // String
    id: number | null; // Int
    name: string | null; // String
    username: string | null; // String
  }
  InvoiceAmountType: { // field return type
    amount: number | null; // Int
    date: string | null; // String
  }
  InvoiceHistoryType: { // field return type
    createdAt: string | null; // String
    description: string | null; // String
    invoiceId: number | null; // Int
    user: string | null; // String
  }
  InvoiceType: { // field return type
    TotalAmount: number | null; // Int
    createdAt: string | null; // String
    customer: NexusGenRootTypes['CustomerType'] | null; // CustomerType
    date: string | null; // String
    description: string | null; // String
    dueDate: string | null; // String
    id: number | null; // Int
    items: Array<NexusGenScalars['JSON'] | null> | null; // [JSON]
    name: string | null; // String
    number: number | null; // Int
    status: NexusGenEnums['status'] | null; // status
    term: number | null; // Int
    title: string | null; // String
    user: NexusGenRootTypes['UserType'] | null; // UserType
    userId: number | null; // Int
    username: string | null; // String
  }
  Mutation: { // field return type
    createInvoice: NexusGenRootTypes['InvoiceType']; // InvoiceType!
    loginUser: boolean | null; // Boolean
    logoutUser: boolean | null; // Boolean
    registerUser: NexusGenRootTypes['UserType']; // UserType!
    updateInvoice: NexusGenRootTypes['InvoiceType']; // InvoiceType!
  }
  Query: { // field return type
    SumRange: NexusGenRootTypes['InvoiceAmountType'] | null; // InvoiceAmountType
    customerSearch: NexusGenRootTypes['CustomerType'] | null; // CustomerType
    customers: Array<NexusGenRootTypes['CustomerType'] | null> | null; // [CustomerType]
    findInvoiceById: NexusGenRootTypes['InvoiceType'] | null; // InvoiceType
    findinvoice: Array<NexusGenRootTypes['InvoiceType'] | null> | null; // [InvoiceType]
    findinvoiceHistory: Array<NexusGenRootTypes['InvoiceHistoryType'] | null> | null; // [InvoiceHistoryType]
    getMe: NexusGenRootTypes['GetMeType'] | null; // GetMeType
    invoices: Array<NexusGenRootTypes['InvoiceType'] | null> | null; // [InvoiceType]
    suminvoices: Array<NexusGenRootTypes['InvoiceAmountType'] | null> | null; // [InvoiceAmountType]
  }
  UserType: { // field return type
    createdAt: number | null; // Float
    email: string | null; // String
    id: number | null; // Int
    name: string | null; // String
    role: Array<NexusGenEnums['Roles'] | null> | null; // [Roles]
    username: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  CustomerType: { // field return type name
    contactInfo: 'String'
    name: 'String'
  }
  GetMeType: { // field return type name
    email: 'String'
    id: 'Int'
    name: 'String'
    username: 'String'
  }
  InvoiceAmountType: { // field return type name
    amount: 'Int'
    date: 'String'
  }
  InvoiceHistoryType: { // field return type name
    createdAt: 'String'
    description: 'String'
    invoiceId: 'Int'
    user: 'String'
  }
  InvoiceType: { // field return type name
    TotalAmount: 'Int'
    createdAt: 'String'
    customer: 'CustomerType'
    date: 'String'
    description: 'String'
    dueDate: 'String'
    id: 'Int'
    items: 'JSON'
    name: 'String'
    number: 'Int'
    status: 'status'
    term: 'Int'
    title: 'String'
    user: 'UserType'
    userId: 'Int'
    username: 'String'
  }
  Mutation: { // field return type name
    createInvoice: 'InvoiceType'
    loginUser: 'Boolean'
    logoutUser: 'Boolean'
    registerUser: 'UserType'
    updateInvoice: 'InvoiceType'
  }
  Query: { // field return type name
    SumRange: 'InvoiceAmountType'
    customerSearch: 'CustomerType'
    customers: 'CustomerType'
    findInvoiceById: 'InvoiceType'
    findinvoice: 'InvoiceType'
    findinvoiceHistory: 'InvoiceHistoryType'
    getMe: 'GetMeType'
    invoices: 'InvoiceType'
    suminvoices: 'InvoiceAmountType'
  }
  UserType: { // field return type name
    createdAt: 'Float'
    email: 'String'
    id: 'Int'
    name: 'String'
    role: 'Roles'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createInvoice: { // args
      TotalAmount?: number | null; // Int
      contactInfo?: string | null; // String
      customer?: string | null; // String
      description?: string | null; // String
      dueDate?: string | null; // String
      items?: Array<NexusGenInputs['ItemInput'] | null> | null; // [ItemInput]
      status?: NexusGenEnums['status'] | null; // status
      term?: number | null; // Int
      title?: string | null; // String
    }
    loginUser: { // args
      password?: string | null; // String
      username?: string | null; // String
    }
    registerUser: { // args
      input?: NexusGenInputs['registerUserInput'] | null; // registerUserInput
    }
    updateInvoice: { // args
      TotalAmount?: number | null; // Int
      contactInfo?: string | null; // String
      customer?: string | null; // String
      description?: string | null; // String
      dueDate?: string | null; // String
      id?: number | null; // Int
      items?: Array<NexusGenInputs['ItemInput'] | null> | null; // [ItemInput]
      status?: NexusGenEnums['status'] | null; // status
      term?: number | null; // Int
      title?: string | null; // String
    }
  }
  Query: {
    SumRange: { // args
      fromDate?: string | null; // String
      toDate?: string | null; // String
    }
    customerSearch: { // args
      customerName?: string | null; // String
    }
    customers: { // args
      name?: string | null; // String
    }
    findInvoiceById: { // args
      id?: number | null; // Int
    }
    findinvoice: { // args
      fromDate?: string | null; // String
      overdue?: boolean | null; // Boolean
      status?: NexusGenEnums['status'] | null; // status
      toDate?: string | null; // String
      where?: string | null; // String
    }
    findinvoiceHistory: { // args
      invoiceId?: number | null; // Int
    }
    suminvoices: { // args
      Limit?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}